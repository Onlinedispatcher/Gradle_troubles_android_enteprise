import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.fernandocejas.frodo'
apply from: '../jacoco-unit-tests.gradle'
// ------------------------------------------------------------------------------------------

apply plugin: 'spoon'

spoon {
    adbTimeout = 120 // 120 seconds
    if (project.hasProperty('spoonClassName')) {
        className = project.spoonClassName
    }
    ignoreFailures = true
    debug = true
    noAnimations = false
    codeCoverage = false
    // To grant permissions to Android M >= devices */
    grantAllPermissions = true
}

android {
    adbOptions {
        timeOutInMs 120 * 1000 // 120 seconds
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            all {
                // configure the test JVM arguments
                jvmArgs '-noverify'
            }
        }
    }

    compileSdkVersion 25
    buildToolsVersion '25'

    useLibrary 'org.apache.http.legacy'

    dexOptions {
        jumboMode true
        preDexLibraries preDexEnabled
        javaMaxHeapSize "4g"
        maxProcessCount = 8
    }


    signingConfigs {
        release {
            storeFile file('../Assets/release.jks')
            storePassword "release"
            keyAlias "release"
            keyPassword "release"
        }
  debug {
            storeFile file('../Assets/release.jks')
            storePassword "release"
            keyAlias "release"
            keyPassword "release"
        }
    }


    defaultConfig {
        applicationId "fail.multidex.espresso"


        minSdkVersion 16
        targetSdkVersion 25

        testInstrumentationRunner "espresso.fail.multidex.CustomJunitRunner"

        multiDexEnabled true
    }

    buildTypes {

        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguardRules/proguard-rules.pro', '../proguardRules/proguard-debug-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguardRules/proguard-rules.pro', '../proguardRules/proguard-debug-test-rules.pro'
            testCoverageEnabled false
        }
        release {
            minifyEnabled true
            shrinkResources true
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguardRules/proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguardRules/proguard-rules.pro'
        }
    }

    // country flavor overrides pay flavor which overrides defaultConfig
    // keep the order exactly like this!
    flavorDimensions 'pay', 'country', 'api'

    // not all product flavor combinations are valid, we're ignoring a couple, see below
    productFlavors {
        /* Feature-Flags */
        def PAY_START = "PAY_START"
        // Have to override versionName here, since versionNameSuffix is not yet supported for flavors:
        // https://code.google.com/p/android/issues/detail?id=59614
        pay {
            dimension 'pay'
        }
        nonpay {
            dimension 'pay'
        }
        bleeding {
            dimension 'api'
            minSdkVersion 21
        }
        compat {
            dimension 'api'
            minSdkVersion 16
        }
        germany {
            dimension 'country'
            signingConfig signingConfigs.release
            applicationId "fail.multidex.espresso.de"
            buildConfigField "boolean", PAY_START, "true"
            versionCode appVersionCodeDE
            versionName appVersionNameDE
            resConfigs "en", "de"
        }
        italy {
            dimension 'country'
            signingConfig signingConfigs.release
            applicationId "fail.multidex.espresso.it"
            versionCode appVersionCodeIT
            versionName appVersionNameIT
            resConfigs "en", "it"
        }
        mexico {
            dimension 'country'
            signingConfig signingConfigs.release
            applicationId "fail.multidex.espresso.mx"
            versionCode appVersionCodeMX
            versionName appVersionNameMX
            resConfigs "en", "es"
        }
        unitedStates {
            dimension 'country'
            signingConfig signingConfigs.release
            applicationId "fail.multidex.espresso.us"
            versionCode appVersionCodeUS
            versionName appVersionNameUS
            resConfigs "en", "en"
        }
    }

    lintOptions {
        abortOnError false
    }

    applicationVariants.all { variant ->
//        variant.outputs[0].outputFile = new File(
//                (String) variant.outputs[0].outputFile.parent,
//                "DSA_" + variant.productFlavors[0].name + "_"
//                        + variant.productFlavors[1].name + "_"
//                        + "api" + variant.productFlavors[2].minSdkVersion.apiLevel + "_"
//                        + variant.buildType.name + "_"
//                        + (isProduction ? "prod_" : "")
//                        + variant.mergedFlavor.versionName + ".apk")
        //temporary workaround for spoon issue of chaning apk names see https://github.com/stanfy/spoon-gradle-plugin/issues/94
        //when this is fixed top code can be again used since its cleaner and manuall copy task can be obsoleted
        variant.assemble.doLast {
            def originZipAlignedApkFile = variant.outputs[0].outputFile;
            def renameZipAlignedApkFile = ("COMPANYNAME" + variant.productFlavors[0].name + "_"
                    + variant.productFlavors[1].name + "_"
                    + "api" + variant.productFlavors[2].minSdkVersion.apiLevel + "_"
                    + variant.buildType.name + "_"
                    + (isProduction.toBoolean() ? "prod_" : "")
                    + (isBeta.toBoolean() ? "beta_" : "")
                    + variant.mergedFlavor.versionName + "r${revision}.apk")
            copy {
                from "$originZipAlignedApkFile"
                into "$originZipAlignedApkFile.parent"
                rename("$originZipAlignedApkFile.name", "$renameZipAlignedApkFile")
            }
        }
    }

    // ignore impossible variants
    variantFilter { variant ->
        if (variant.getFlavors().get(0).name == 'pay' &&
                !variant.getFlavors().get(1).name.startsWith("germany")) {
            variant.setIgnore(true);
        }
        if (variant.getFlavors().get(0).name == 'nonpay' &&
                variant.getFlavors().get(1).name.startsWith("germany")) {
            variant.setIgnore(true);
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
        exclude '.readme'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

}

// ------------------------------------------------------------------------------------------

dependencies {
    germanyCompile project(path: ':core', configuration: isProduction ? 'germanyLive' : 'germanyRelease')
    payCompile project(path: ':pay', configuration: 'germanyRelease')

    //build flags are not propagated to libs until following bug is fixed: https://code.google.com/p/android/issues/detail?id=52962
    //that is the reason we use release / live build types to chain different build configs trought the build modules
    italyCompile project(path: ':core', configuration: isProduction ? 'italyLive' : 'italyRelease')

    mexicoCompile project(path: ':core', configuration: isProduction ? 'mexicoLive' : 'mexicoRelease')

    unitedStatesCompile project(path: ':core', configuration: isProduction ? 'unitedStatesLive' : 'unitedStatesRelease')

    // do not remove from app.gradle or firebase will crash when receiving messages
    compile 'com.google.android.gms:play-services-location:9.8.0'

    apt 'com.google.dagger:dagger-compiler:2.4'
    testApt 'com.google.dagger:dagger-compiler:2.4'
    compile 'com.google.dagger:dagger:2.4'
    androidTestApt 'com.google.dagger:dagger-compiler:2.4'
    androidTestCompile 'com.google.dagger:dagger:2.4'

    compile 'com.android.support:appcompat-v7:25.0.1'
    compile 'com.android.support:support-annotations:25.0.1'
    testCompile 'com.android.support:support-annotations:25.0.1'
    androidTestCompile 'com.android.support:support-annotations:25.0.1'
    compile 'com.android.support:recyclerview-v7:25.0.1'
    compile 'com.android.support:cardview-v7:25.0.1'
    compile 'com.android.support:design:25.0.1'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'com.jakewharton:butterknife:7.0.1'

    compile('eu.inmite.android.lib:android-validation-komensky:0.9.2') {
        exclude group: 'com.google.android', module: 'support-v4'
    }


    androidTestCompile 'io.reactivex:rxjava:1.1.7'
    compile 'io.reactivex:rxjava:1.1.7'
    androidTestCompile('io.reactivex:rxandroid:1.2.1')
            {
                exclude group: 'io.reactivex:rxjava', module: 'rxjava'
            }
    compile('io.reactivex:rxandroid:1.2.1')
            {
                exclude group: 'io.reactivex:rxjava', module: 'rxjava'
            }
    androidTestCompile 'com.artemzin.rxjava:proguard-rules:1.1.7.0'
    compile 'com.artemzin.rxjava:proguard-rules:1.1.7.0'
    testCompile 'com.artemzin.rxjava:proguard-rules:1.1.7.0'


    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'

    // there is a conflict with the test support library (see http://stackoverflow.com/questions/29857695)
    // so for now re exclude the support-annotations dependency from here to avoid clashes
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
        exclude module: 'support-v7'
    }
    // exclude a couple of more modules here because of <http://stackoverflow.com/questions/29216327> and
    // more specifically of <https://code.google.com/p/android-test-kit/issues/detail?id=139>
    // otherwise you'll receive weird crashes on devices and dex exceptions on emulators
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2.2') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'design'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
        exclude module: 'support-v7'
    }
    //excluded specific packages due to https://code.google.com/p/android/issues/detail?id=183454 -.-´´
    androidTestCompile('com.android.support.test.espresso:espresso-intents:2.2.2') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
        exclude module: 'support-v7'
    }

    androidTestCompile('com.android.support.test.espresso:espresso-web:2.2.2') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
        exclude module: 'support-v7'
    }

    androidTestCompile('com.android.support.test:runner:0.5') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
        exclude module: 'support-v7'
    }
    androidTestCompile('com.android.support.test:rules:0.5') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
        exclude module: 'support-v7'
    }

    apt 'com.google.dagger:dagger-compiler:2.4'
    compile 'com.google.dagger:dagger:2.4'
    compile 'com.android.support:multidex:1.0.1'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'com.jakewharton:butterknife:8.4.0'
    apt 'com.jakewharton:butterknife-compiler:8.4.0'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.1.4'
    androidTestCompile 'de.greenrobot:eventbus:2.4.0'
    testCompile 'de.greenrobot:eventbus:2.4.0'
    testCompile 'org.robolectric:shadows-core-v22:3.1.4'
    testCompile 'org.robolectric:shadows-support-v4:3.1.4'
    testCompile 'org.robolectric:shadows-multidex:3.1.4'
    testCompile 'org.robolectric:shadows-play-services:3.1.4'
    testCompile 'org.robolectric:shadows-httpclient:3.1.4'
    testCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.google.dagger:dagger:2.4'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'com.crittercism.dexmaker:dexmaker:1.4'
    androidTestCompile 'com.crittercism.dexmaker:dexmaker-dx:1.4'
    androidTestCompile 'com.crittercism.dexmaker:dexmaker-mockito:1.4'
    androidTestCompile 'com.squareup.spoon:spoon-client:1.7.0'
    androidTestCompile 'com.squareup.okhttp3:mockwebserver:3.5.0-SNAPSHOT'
    androidTestApt 'com.google.dagger:dagger-compiler:2.4'
    testApt 'com.google.dagger:dagger-compiler:2.4'

    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    provided 'javax.annotation:jsr250-api:1.0'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
    retrolambdaConfig 'net.orfjackal.retrolambda:retrolambda:2.1.0'

    compile 'org.apache.commons:commons-collections4:4.1'
}


project.gradle.taskGraph.whenReady {
    //FIXME this bleeding statement does not with gradle gradle:2.2.0-rc2. It is ok for now, to comment this out, as long jenkins is not building bleeding versions
//    connectedPayGermanyCompatDebugAndroidTest {
//        ignoreFailures isJenkins
//    }
//    connectedPayGermanyBleedingDebugAndroidTest {
//        ignoreFailures isJenkins
//    }
}

// -------------
def addVersionInformation(country, appVersionMajor, appVersionMinor, appVersionPatch) {
    File file = new File(rootProject.projectDir, "app/release_docs/release_notes_${country}.txt")
    file.delete();
    file.createNewFile();
    file.append("${appVersionMajor}.${appVersionMinor}.${appVersionPatch}r${revision}")
    if (System.getenv("BRANCH") != null) {
        file.append("\nBranch: " + System.getenv("BRANCH"));
    } else {
        file.append("\nTRUNK");
    }
    if (System.getenv("JOB_NAME") != null) {
        file.append("\nJob: " + System.getenv("JOB_NAME"));
    } else {
        file.append("\nJob: <local gradle build>");
    }
    file.append("\nisBeta: ${isBeta}");
    file.append("\nisProduction: ${isProduction}");
    file.append("\n\nChangelog: " + System.getenv("CHANGELOG"));

    println "Changelog added: " + System.getenv("CHANGELOG");
    println "Changelog2 added: " + System.getProperty("CHANGELOG");
    return file;
}

// ------------------------------------------------------------------------------------------

task buildDE(dependsOn: ['assemblePayGermanyCompatDebug', 'assemblePayGermanyCompatRelease',
                         'lintPayGermanyCompatDebug', 'lintPayGermanyCompatRelease',
                         ':core:lintGermanyDebug', ':pay:lintGermanyDebug',
                         ':core:testGermanyDebugUnitTest', ':pay:testGermanyDebugUnitTest',
                         'testPayGermanyCompatDebugUnitTest', 'testPayGermanyCompatReleaseUnitTest']) {
    description = "For DE: Build, runs unit tests and lint check, assembles german debug and release version"
}


task buildIT(dependsOn: ['assembleNonpayItalyCompatDebug', 'assembleNonpayItalyCompatRelease',
                         'lintNonpayItalyCompatDebug', 'lintNonpayItalyCompatRelease',
                         ':core:lint', ':core:testItalyDebugUnitTest',
                         'testNonpayItalyCompatDebugUnitTest', 'testNonpayItalyCompatReleaseUnitTest']) {
    description = "For IT: Build, runs unit tests, instrumentation tests and lint check, assembles italian debug and release version"
}

task buildMX(dependsOn: ['assembleNonpayMexicoCompatDebug', 'assembleNonpayMexicoCompatRelease',
                         'lintNonpayMexicoCompatDebug', 'lintNonpayMexicoCompatRelease',
                         ':core:lint', ':core:testMexicoDebugUnitTest',
                         'testNonpayMexicoCompatDebugUnitTest', 'testNonpayMexicoCompatReleaseUnitTest']) {
    description = "For MX: Build, runs unit tests, instrumentation tests and lint check, assembles mexican debug and release version"
}

task buildUS(dependsOn: ['assembleNonpayUnitedStatesCompatDebug', 'assembleNonpayUnitedStatesCompatRelease',
                         'lintNonpayUnitedStatesCompatDebug', 'lintNonpayUnitedStatesCompatRelease',
                         ':core:lint', ':core:testUnitedStatesDebugUnitTest',
                         'testNonpayUnitedStatesCompatDebugUnitTest', 'testNonpayUnitedStatesCompatReleaseUnitTest']) {
    description = "For US: Build, runs unit tests, instrumentation tests and lint check, assembles mexican debug and release version"
}

task(info) << {
    logging.captureStandardOutput LogLevel.LIFECYCLE
    println ">>> I am " + (isJenkins ? "" : "NOT ") + "running on Jenkins and do " + (isProduction ? "" : "NOT ") + "create a production release <<<"
}
preBuild.dependsOn += info

// copy the correct google-services.json to the app project root folder
apply from: 'firebase/config-firebase.gradle'
apply plugin: 'com.google.gms.google-services'